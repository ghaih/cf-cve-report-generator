package json

import (
	"io/ioutil"
	"encoding/json"
	"fmt"
)

// Generated by https://mholt.github.io/json-to-go/
type AutoGenerated struct {
	CVEDataType         string `json:"CVE_data_type"`
	CVEDataFormat       string `json:"CVE_data_format"`
	CVEDataVersion      string `json:"CVE_data_version"`
	CVEDataNumberOfCVEs string `json:"CVE_data_numberOfCVEs"`
	CVEDataTimestamp    string `json:"CVE_data_timestamp"`
	CVEItems            []struct {
		Cve struct {
			    CVEDataMeta struct {
						ID string `json:"ID"`
					} `json:"CVE_data_meta"`
			    Affects struct {
						Vendor struct {
							       VendorData []struct {
								       VendorName string `json:"vendor_name"`
								       Product    struct {
											  ProductData []struct {
												  ProductName string `json:"product_name"`
												  Version     struct {
														      VersionData []struct {
															      VersionValue string `json:"version_value"`
														      } `json:"version_data"`
													      } `json:"version"`
											  } `json:"product_data"`
										  } `json:"product"`
							       } `json:"vendor_data"`
						       } `json:"vendor"`
					} `json:"affects"`
			    Problemtype struct {
						ProblemtypeData []struct {
							Description []struct {
								Lang  string `json:"lang"`
								Value string `json:"value"`
							} `json:"description"`
						} `json:"problemtype_data"`
					} `json:"problemtype"`
			    References struct {
						ReferenceData []struct {
							URL string `json:"url"`
						} `json:"reference_data"`
					} `json:"references"`
			    Description struct {
						DescriptionData []struct {
							Lang  string `json:"lang"`
							Value string `json:"value"`
						} `json:"description_data"`
					} `json:"description"`
		    } `json:"cve"`
		Configurations struct {
			    CVEDataVersion string `json:"CVE_data_version"`
			    Nodes          []struct {
				    Operator string `json:"operator"`
				    Cpe      []struct {
					    Vulnerable     bool   `json:"vulnerable"`
					    CpeMatchString string `json:"cpeMatchString"`
					    Cpe23URI       string `json:"cpe23Uri"`
				    } `json:"cpe"`
			    } `json:"nodes"`
		    } `json:"configurations"`
		Impact struct {
			    BaseMetricV3 struct {
						 CvssV3 struct {
								VectorString          string  `json:"vectorString"`
								AttackVector          string  `json:"attackVector"`
								AttackComplexity      string  `json:"attackComplexity"`
								PrivilegesRequired    string  `json:"privilegesRequired"`
								UserInteraction       string  `json:"userInteraction"`
								Scope                 string  `json:"scope"`
								ConfidentialityImpact string  `json:"confidentialityImpact"`
								IntegrityImpact       string  `json:"integrityImpact"`
								AvailabilityImpact    string  `json:"availabilityImpact"`
								BaseScore             float64 `json:"baseScore"`
								BaseSeverity          string  `json:"baseSeverity"`
							} `json:"cvssV3"`
						 ExploitabilityScore float64 `json:"exploitabilityScore"`
						 ImpactScore         float64 `json:"impactScore"`
					 } `json:"baseMetricV3"`
			    BaseMetricV2 struct {
						 CvssV2 struct {
								VectorString          string  `json:"vectorString"`
								AccessVector          string  `json:"accessVector"`
								AccessComplexity      string  `json:"accessComplexity"`
								Authentication        string  `json:"authentication"`
								ConfidentialityImpact string  `json:"confidentialityImpact"`
								IntegrityImpact       string  `json:"integrityImpact"`
								AvailabilityImpact    string  `json:"availabilityImpact"`
								BaseScore             float64 `json:"baseScore"`
							} `json:"cvssV2"`
						 Severity                string  `json:"severity"`
						 ExploitabilityScore     float64 `json:"exploitabilityScore"`
						 ImpactScore             float64 `json:"impactScore"`
						 ObtainAllPrivilege      bool    `json:"obtainAllPrivilege"`
						 ObtainUserPrivilege     bool    `json:"obtainUserPrivilege"`
						 ObtainOtherPrivilege    bool    `json:"obtainOtherPrivilege"`
						 UserInteractionRequired bool    `json:"userInteractionRequired"`
					 } `json:"baseMetricV2"`
		    } `json:"impact"`
		PublishedDate    string `json:"publishedDate"`
		LastModifiedDate string `json:"lastModifiedDate"`
	} `json:"CVE_Items"`
}
func PrintJson( year string){

	raw, err := ioutil.ReadFile(fmt.Sprintf("./output/nvdcve-1.0-%s.json", year))
	if err != nil {
		fmt.Println(err)
		return
	}

	data := AutoGenerated{}
	err = json.Unmarshal(raw, &data)
	if err != nil {
		fmt.Println(err)
		return
	}

	for _, cve := range data.CVEItems {
		fmt.Printf("%s|%s|%s|%s\n", cve.Cve.CVEDataMeta.ID, cve.Impact.BaseMetricV3.CvssV3.BaseSeverity, cve.Cve.Description.DescriptionData[0].Value,
		cve.Cve.Affects.Vendor.VendorData)

	}
}
